#!/usr/bin/env python3
import sys
from datetime import datetime

def generate_progress_report(results):
    """Generate a progress report based on exercise results"""
    
    exercises = [
        "Exercise 1: Variable Declaration and Initialization",
        "Exercise 2: Variable Reassignment", 
        "Exercise 3: String Concatenation",
        "Exercise 4: String Interpolation",
        "Exercise 5: String Methods (Trim, Replace, Search)"
    ]
    
    passed = sum(1 for result in results if result == "success")
    total = len(exercises)
    
    report = f"""# C# String Exercises Progress Report
    
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")} UTC

## Overall Progress: {passed}/{total} Exercises Completed

### Exercise Status:

"""
    
    for i, (exercise, result) in enumerate(zip(exercises, results)):
        status_emoji = "✅" if result == "success" else "❌"
        status_text = "PASSED" if result == "success" else "FAILED"
        
        report += f"{status_emoji} **{exercise}** - {status_text}\n"
        
        if result != "success" and i > 0:
            prev_result = results[i-1]
            if prev_result != "success":
                report += f"   ⚠️  *Cannot attempt this exercise until previous exercise passes*\n"
        
        report += "\n"
    
    if passed == total:
        report += """## 🎉 Congratulations!

You have successfully completed all C# String exercises!

### Next Steps:
- Practice with more complex string manipulations
- Learn about regular expressions
- Explore file I/O with strings
- Build a text processing application

"""
    else:
        next_exercise_num = passed + 1
        if next_exercise_num <= total:
            report += f"""## Next Steps:

You need to complete **{exercises[next_exercise_num - 1]}** to proceed.

### Tips for Success:
- Read the requirements carefully in the comments
- Follow the exact variable names specified
- Ensure your output matches the expected format
- Test your code locally before committing

"""
    
    report += f"""## Debug Information:

Exercise Results: {results}
Timestamp: {datetime.now().isoformat()}

---
*This report was automatically generated by the GitHub Actions testing system.*
"""
    
    with open('progress_report.md', 'w') as f:
        f.write(report)
    
    print("📊 Progress Report Generated:")
    print(f"   Completed: {passed}/{total} exercises")
    print(f"   Success Rate: {(passed/total)*100:.1f}%")
    
    return passed == total

def main():
    if len(sys.argv) != 6:
        print("Usage: generate_report.py <ex1_result> <ex2_result> <ex3_result> <ex4_result> <ex5_result>")
        sys.exit(1)
    
    results = sys.argv[1:6]
    success = generate_progress_report(results)
    
    with open('exercise_status.txt', 'w') as f:
        for i, result in enumerate(results, 1):
            f.write(f"Exercise {i}: {result}\n")
    
    print("\n📋 Individual Exercise Status:")
    for i, result in enumerate(results, 1):
        status_emoji = "✅" if result == "success" else "❌"
        print(f"   Exercise {i}: {status_emoji} {result}")

if __name__ == "__main__":
    main()
